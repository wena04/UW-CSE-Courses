"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const list_1 = require("./list");
describe('list', function () {
    it('len', function () {
        // 0-1-many: base case, 0 recursive calls (only 1 possible input)
        assert.deepStrictEqual((0, list_1.len)(list_1.nil), 0n);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1n, list_1.nil)), 1n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(2n, list_1.nil)), 1n);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), 2n);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, (0, list_1.cons)(0n, list_1.nil))))), 4n);
    });
    it('equal', function () {
        // 0-1-many: 0 recursive calls - first branch
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, list_1.nil), true);
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, (0, list_1.cons)(1n, list_1.nil)), false);
        // 0-1-many: 0 recursive calls - second branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, list_1.nil), list_1.nil), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), list_1.nil), false);
        // 0-1-many: 0 recursive calls - third branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(7n, list_1.nil), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), false);
        // 0-1-many: 1 recursive call - path ends in first branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(3n, list_1.nil), (0, list_1.cons)(3n, list_1.nil)), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5n, list_1.nil), (0, list_1.cons)(5n, (0, list_1.cons)(1n, list_1.nil))), false);
        // 0-1-many: 1 recursive call - path ends in second branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(4n, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(6n, list_1.nil)), false);
        // 0-1-many: 1 recursive call - path ends in third branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5n, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(5n, (0, list_1.cons)(2n, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(9n, (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(9n, (0, list_1.cons)(4n, (0, list_1.cons)(2n, list_1.nil)))), false);
        // 0-1-many: 2 recursive calls
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(4n, (0, list_1.cons)(3n, list_1.nil))), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(7n, (0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(4n, list_1.nil)))), (0, list_1.cons)(7n, (0, list_1.cons)(6n, (0, list_1.cons)(1n, (0, list_1.cons)(4n, list_1.nil))))), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4n, (0, list_1.cons)(3n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(4n, (0, list_1.cons)(3n, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))))), false);
    });
    it('at', function () {
        const L0 = list_1.nil;
        const L1 = (0, list_1.cons)(5n, list_1.nil);
        const L2 = (0, list_1.cons)(4n, (0, list_1.cons)(5n, list_1.nil));
        const L3 = (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)));
        const L4 = (0, list_1.cons)(9n, (0, list_1.cons)(8n, (0, list_1.cons)(7n, (0, list_1.cons)(6n, list_1.nil))));
        // 0-1-many: 0 recursive calls, nil case
        assert.throws(() => (0, list_1.at)(-1n, L0));
        assert.throws(() => (0, list_1.at)(0n, L0));
        assert.throws(() => (0, list_1.at)(-1n, L1));
        assert.throws(() => (0, list_1.at)(1n, L1));
        // 0-1-many: 0 recursive calls, x = 0 case
        assert.deepStrictEqual((0, list_1.at)(0n, L1), 5n);
        assert.deepStrictEqual((0, list_1.at)(0n, L3), 1n);
        // 0-1-many: 1 recursive call - hits nil base case
        assert.throws(() => (0, list_1.at)(1n, L0));
        assert.throws(() => (0, list_1.at)(1n, (0, list_1.cons)(7n, list_1.nil)));
        // 0-1-many: 1 recursive call - hits x = 0 base case
        assert.deepStrictEqual((0, list_1.at)(1n, L2), 5n);
        assert.deepStrictEqual((0, list_1.at)(1n, L3), 2n);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.at)(2n, L3), 3n);
        assert.deepStrictEqual((0, list_1.at)(2n, L4), 7n);
        assert.deepStrictEqual((0, list_1.at)(3n, L4), 6n);
        assert.throws(() => (0, list_1.at)(3n, L3));
        assert.throws(() => (0, list_1.at)(4n, L4));
    });
    it('concat', function () {
        // 0-1-many: base case, 0 recursive calls
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), list_1.nil), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, list_1.nil), (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))));
        // 0-1-many: 2+ recursive call
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), list_1.nil), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(3n, list_1.nil)), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(3n, (0, list_1.cons)(4n, list_1.nil))), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, (0, list_1.cons)(4n, list_1.nil)))));
    });
    it('rev', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.rev)(list_1.nil), list_1.nil);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, list_1.nil)), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(2n, list_1.nil)), (0, list_1.cons)(2n, list_1.nil));
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil)))), (0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil))));
    });
    it('compact_list', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.compact_list)(list_1.nil), []);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1n, list_1.nil)), [1n]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(8n, list_1.nil)), [8n]);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil))), [1n, 2n]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(3n, (0, list_1.cons)(2n, (0, list_1.cons)(1n, list_1.nil)))), [3n, 2n, 1n]);
    });
    it('explode_array', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.explode_array)([]), list_1.nil);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.explode_array)([1n]), (0, list_1.cons)(1n, list_1.nil));
        assert.deepStrictEqual((0, list_1.explode_array)([8n]), (0, list_1.cons)(8n, list_1.nil));
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.explode_array)([1n, 2n]), (0, list_1.cons)(1n, (0, list_1.cons)(2n, list_1.nil)));
        assert.deepStrictEqual((0, list_1.explode_array)([1n, 2n, 3n]), (0, list_1.cons)(1n, (0, list_1.cons)(2n, (0, list_1.cons)(3n, list_1.nil))));
    });
});
//# sourceMappingURL=data:application/json;base64,